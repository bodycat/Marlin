<?php
// БЛОК 1

// Операции инкремента и декремента 
// $a = 1;
// $a++; //увеличит $a на 1, что соответствует коду $a = $a + 1;
// echo $a; //выведет 2

// $a = 1;
// $a--; //уменьшит $a на 1, что соответствует коду $a = $a - 1;
// echo $a; //выведет 0

// Давайте посмотрим, в каких случаях проявляется разница между ++a и a++.
// Пусть у нас есть код echo ++a и код echo a++.
// В первом случае переменная сначала увеличится на единицу, а потом выведется, а во втором случае - сначала выведется, а потом увеличится. 
 
// Операции +=, -=, *=, /= 
// $a = 2;
// $b = $a + 2;
// echo $b;
// 4
// var_dump($b);
// int 4

// $a = 1;
// $a +=3; // $a = $a + 3;

// Кроме того, существуют операторы -=, *=, /=, которые эквивалентны следующему коду: 

// $a = 2;
// $a -= 3; // $a = $a - 3;

// $a = 2;
// $a /= 3; // $a = $a / 3;

// Операция .=
// слияние

// $str = 'abc';
// $str .= 'def'; //этот код полностью эквивалентен коду 
// echo $str;
// //$str = $str . 'def';

// Типизация переменных
// Что будет, если попробовать сложить, к примеру, число и строку, вот так: 3+'3'? В результате вы получите число 

// $a = 3;
// $b = '3';
// $c = $a + $b;
// перенос строки не работает с разметкой
// echo '<br/>';
// echo 'n/r';
// зато работает другой метод, который подходит и для кроссплатформенности  PHP_EOL
// echo $c;
// echo PHP_EOL;
// nl2br — Inserts HTML line breaks before all newlines in a string
// nl2br ( string $string [, bool $is_xhtml = TRUE ] ) : string
// Returns string with <br /> or <br> inserted before all newlines (\r\n, \n\r, \n and \r). 

// Example
// echo nl2br("foo isn't\n bar");
// The above example will output:
// foo isn't<br />
//  bar

//Ответ: он сложит числа, переведет к правильному формату данных
// var_dump($c);
// 6
// int(6)
// PHP автоматически осуществляет преобразование типов при необходимости, вам не нужно за это переживать. 

// То же самое случится, если, к примеру, сделать так: 3+true или 3+false. 
// Попробуйте эти примеры сами и узнайте к чему преобразуется true в этом случае, а чему - false. 

// Примеры решения задач
// Задача

// Задача. Создайте переменную $var и присвойте ей значение 'hello'. Обращаясь к отдельным символам этой строки выведите на экран символ 'h', символ 'e', символ 'o'. 
// $var = 'hello';
// // echo $var[0];
// // echo $var[1];
// // echo $var[2];
// // echo $var[3];
// // echo $var[4];
// // решим циклом
// $num = 0;
// $len_ = strlen($var);
// // или перебор
// while ($num <= $len_) {
//        // echo "$hello";    
// 		echo($var[$num]);
// 	    echo PHP_EOL;
//        // echo "Итерация номер: $num";     
//    $num++; // Внимание! Тут увеличиваем количество показов. Теперь +1
//    // И снова возвращаемся в начало цикла. Проверять, не достигло ли $num значения 5
//    // Если $num не увеличивать с каждым ходом цикла, то цикл будет бесконечным!
//    } 
//   echo PHP_EOL;

// Итерация номер: 1
// Итерация номер: 2
// Итерация номер: 3
// Итерация номер: 4
// Итерация номер: 5
// [Finished in 0.1s]  

// Задача. Переделайте приведенный код так, чтобы в нем использовались операции +=, -=, *=, /=, ++, --. Количество строк кода при этом не должно измениться. Код для переделки: 
// // До
// $var = 1;
// $var = $var + 12;
// $var = $var - 14;
// $var = $var * 5;
// $var = $var / 7;
// $var = $var + 1;
// $var = $var - 1;
// echo $var;
// // После
// $var = 1;
// $var += 12;
// $var -= 14;
// $var *= 5;
// $var /= 7;
// $var += 1;
// $var += 1;
// $var++;
// $var--;
// $var -= 1;
// echo $var;

// Задачи для решения 
// Создайте переменные $a=10 и $b=2. Выведите на экран их сумму, разность, произведение и частное (результат деления). 

// $a = 10;
// $b = 2;

// $c = $a + $b;
// echo($c);

// $c = abs($a - $b);

// echo($c);
// $c = $a * $b;

// echo($c);

// $c = $a / $b;
// echo($c);

// Создайте переменные $c=15 и $d=2. Просуммируйте их, а результат присвойте переменной $result. // Выведите на экран значение переменной $result. 

// $c=15;
// $d=2;
// $result=$c+$d;
// echo($result);
// //17

// Создайте переменные $a=10, $b=2 и $c=5. Выведите на экран их сумму. 

// $a=10;
// $b=2;
// $c=5;
// $sum=$a+$b+$c;
// echo($sum);
// // 17

// Создайте переменные $a=17 и $b=10. Отнимите от $a переменную $b и результат присвойте переменной $c. Затем создайте переменную $d, присвойте ей значение 7. Сложите переменные $c и $d, а результат запишите в переменную $result. Выведите на экран значение переменной $result. 

// $a=17;
// $b=10;
// $a-=$b;
// $d=7;
// $c+=$d;
// $result=$c;
// echo $c;
// 7

// Работа со строками 

// Создайте переменную $text и присвойте ей значение 'Привет, Мир!'. Выведите значение этой переменной на экран. 

// $text='Привет мир!';
// echo $text;

// Создайте переменные $text1='Привет, ' и $text2='Мир!'. С помощью этих переменных и операции сложения строк выведите на экран фразу 'Привет, Мир!'. 

// $text1='Привет';
// $text2='Мир!';
// $name=$text1.', '.$text2;
// echo $name;

// // Привет, Мир!

// $name='Хизри';
// $age='34';

// echo '>Привет,'.' '.$name.'.';
// echo PHP_EOL;
// echo '-Привет! Мне'.' '.$age.' года.';

// >Привет, Хизри.
// -Привет! Мне 34 года.

// Создайте переменную $name и присвойте ей ваше имя. Выведите на экран фразу 'Привет, %Имя%!'. Вместо %Имя% должно стоять ваше имя.

// Создайте переменную $age и присвойте ей ваш возраст. Выведите на экран 'Мне %Возраст% лет!'.

// Обращение к символам строки 

// Создайте переменную $text и присвойте ей значение 'abcde'. Обращаясь к отдельным символам этой строки выведите на экран символ 'a', символ 'c', символ 'e'. 

// $text='abcde';
// echo $text[0];
// echo PHP_EOL;
// echo $text[2];
// echo PHP_EOL;
// echo $text[4];

// a
// c
// e

// Дана произвольная строка, например, 'abcde'. Поменяйте первую букву (то есть букву 'a') этой строки на '!'. 

// $text='abcde';
// $text[0]='!';
// echo $text;

// 1bcde

// Создайте переменную $num и присвойте ей значение '12345'. Найдите сумму цифр этого числа. 


// $num='12345';
// $sum=0;
// $sum = $num[0]+$num[1]+$num[2]+$num[3]+$num[4]; 
// echo $sum;
// echo PHP_EOL;

// //15


// $num=12345;
// echo array_sum(str_split($num));
// echo PHP_EOL;

// //15

// $num = '12345';
// $sum = 0;
// do {
//     $sum += $num % 10;
// }
// while ($num = (int) $num / 10);
// echo $sum; 
// //15

//  Практика

// Напишите скрипт, который считает количество секунд в часе, в сутках, в месяце.

// Создайте три переменные - час, минута, секунда. С их помощью выведите текущее время в формате 'час:минута:секунда'.

// Создайте переменную, присвойте ей число. Возведите это число в квадрат (это значит нужно умножить его само на себя). Выведите его на экран.

// $hours = 23;
// $minutes = 30;
// $seconds = 00;

// $sec = ($hours*60*60)+($minutes*60)+$seconds;
// echo $sec.' секунд';
// // 84600 секунд

// Работа с присваиванием и декрементами 
// Переделайте этот код так, чтобы в нем использовались операции +=, -=, *=, /=. Количество строк кода при этом не должно измениться. 

// $var = 47;
// $var = $var + 7;
// $var = $var - 18;
// $var = $var * 10;
// $var = $var / 20;
// echo $var;
// // 18

// $var = 47;
// $var += 7;
// $var -= 18;
// $var *= 10;
// $var /= 20;
// echo $var;
// // 18

// Переделайте этот код так, чтобы в нем использовалась операция .=. Количество строк кода при этом не должно измениться. 

// $text = 'Я';
// $text = $text.' хочу';
// $text = $text.' знать';
// $text = $text.' PHP!';
// echo $text;
// // Я хочу знать PHP!

// $text = 'Я';
// $text .= ' хочу';
// $text .= ' знать';
// $text .= ' PHP!';
// echo $text;
// // Я хочу знать PHP!

// Переделайте этот код так, чтобы в нем использовались операции ++ и --. Количество строк кода при этом не должно измениться. 

// $var = 10;
// $var = $var + 1;
// $var = $var + 1;
// $var = $var - 1;
// echo $var;
// // 11

// $var = 10;
// $var++;
// $var++;
// $var--;
// echo $var;
// // 11

// Переделайте этот код так, чтобы в нем использовались операции ++, -- , +=, -=, *=, /=. Количество строк кода при этом не должно измениться. 

// $var = 10;
// $var = $var + 7;
// $var = $var + 1;
// $var = $var - 1;
// $var = $var + 12;
// $var = $var * 7;
// $var = $var - 15;
// echo $var;
// // 188

// $var = 10;
// $var += 7;
// $var += 1;
// $var -= 1;
// $var += 12;
// $var *= 7;
// $var -= 15;
// echo $var;
// // 188

// БЛОК 2
// Основы работы с массивами на PHP
//   $a = [1,2,3,4,5]; //создаем массив $a
//   // echo $a;

//   var_dump($a);
// // array(5) {
// //   [0]=>
// //   int(1)
// //   [1]=>
// //   int(2)
// //   [2]=>
// //   int(3)
// //   [3]=>
// //   int(4)
// //   [4]=>
// //   int(5)

// Пока созданный нами массив не содержит никаких данных. Заполним его названиями дней недели (для краткости пишу две буквы каждого дня): 
// $a = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// var_dump($a);

// // array(7) {
// //   [0]=>
// //   string(4) "пн"
// //   [1]=>
// //   string(4) "вт"
// //   [2]=>
// //   string(4) "ср"
// //   [3]=>
// //   string(4) "чт"
// //   [4]=>
// //   string(4) "пт"
// //   [5]=>
// //   string(4) "сб"
// //   [6]=>
// //   string(4) "вс"
// // }

// $a = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// echo $a[2];

// // ср

// Ассоциативный массив 

// Поэтому в PHP можно указать ключи в явном виде – так, как нам нужно. Сделаем так, чтобы понедельник имел ключ 1, а не ноль, как было раньше (и всем остальным дням прибавим единицу): 

//Укажем ключи в явном виде:
// $a = [1=>'пн', 2=>'вт', 3=>'ср', 4=>'чт', 5=>'пт', 6=>'сб', 7=>'вс'];
// echo $a[1]; 
// // пн

//  Синтаксис здесь такой: ключ, затем идет стрелка =>, а потом значение.
// Ключи не обязательно должны быть числами, они могут быть и строками. Сделаем массив, в котором ключами будут имена работников, а элементами - их зарплаты: 
//Массив работников:
// $a = ['Коля'=>200, 'Вася'=>300, 'Петя'=>400];
// echo $a['Коля'];
// // 200
// Узнаем зарплату Васи: 

// $a = ['Коля'=>200, 'Вася'=>300, 'Петя'=>400];
// echo $a['Вася']; //выведет 300
//! Массивы, у которых явно указаны ключи, называются ассоциативными. 

//  На самом деле нет необходимости расставлять ключи всем элементам - достаточно только первому элементу поставить ключ 1.
// Если у второго элемента не будет ключа, PHP поставит его автоматически, причем следующий по порядку.
// А следующим номером будет как раз-таки число 2, так как предыдущий элемент имел ключ 1 (неважно, что мы сами его поставили, а не PHP автоматически).
// Давайте поправим наш массив: 

//Укажем ключи в явном виде:
// $a = [1=>'пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
// echo $a[3]; //выведет 'ср'
// // ср
// Итак, этот массив с одним нашим ключом фактически будет таким же, как и массив со всеми ключами, но сделать его проще - ключ ставится только первому элементу, а не всем. 

//  Как еще можно создать массив
// Объявление массива с помощью команды [] не является единственным способом его создания.
// Можно просто присвоить значения элементам массива, не объявляя его через array (PHP нас поймет и сам создаст массив): 

// //Можно не писать [], а просто присвоить значения его элементам:
// $a[0] = 1;
// $a[1] = 2;
// $a[2] = 3;
// var_dump($a); //с помощью var_dump убеждаемся в том, что $a – это массив

// //Ключи могут быть строками:
// $a['Коля'] = 100;
// $a['Вася'] = 200;
// $a['Петя'] = 300;
// var_dump($a); //с помощью var_dump убеждаемся в том, что $a – это массив

// // array(3) {
// //   ["Коля"]=>
// //   int(100)
// //   ["Вася"]=>
// //   int(200)
// //   ["Петя"]=>
// //   int(300)
// // }

// Кроме того, можно сделать так, что PHP сам добавит ключи (начиная с нуля и так далее). Для этого мы оставим квадратные скобки пустыми: $a[] = 1, а PHP сам добавит ключ. Пример: 

// //Мы не пишем ключи в квадратных скобках
// $a[] = 100; //100 будет иметь ключ 0
// $a[] = 200; //200 будет иметь ключ 1
// $a[] = 300; //300 будет иметь ключ 1
// var_dump($a); //массив $a будет иметь вид [0=>100, 1=>200, 2=>300]

// // array(3) {
// //   [0]=>
// //   int(100)
// //   [1]=>
// //   int(200)
// //   [2]=>
// //   int(300)
// // }

//  Все способы создания массива
// Итак, повторим все способы создания массива: 

// //Можно просто его объявить:
// $a = [];

// //Можно его сразу и заполнить:
// $a = [1, 2, 3];

// //Можно не писать [], а просто присвоить значения его элементам:
// $a[0] = 1;
// $a[1] = 2;
// $a[2] = 3;

// //Можно даже не писать ключи, тогда PHP добавит их автоматически, начиная с нуля:
// $a[] = 1;
// $a[] = 2;
// $a[] = 3;
// var_dump($a);

// array(6) {
//   [0]=>
//   int(1)
//   [1]=>
//   int(2)
//   [2]=>
//   int(3)
//   [3]=>
//   int(1)
//   [4]=>
//   int(2)
//   [5]=>
//   int(3)
// }

//  Многомерный массив

// Элементы массива могут быть не только строками и числами, но и массивами. То есть у нас получится массив массивов или многомерный массив.

// Давайте сделаем массив студентов $students, который будет содержать два подмассива: студенты 
// мужского пола и женского: 

// //Многомерный массив студентов:
// $a = [
//     'boys' => ['Коля', 'Вася', 'Петя'],
//     'girls' => ['Даша', 'Маша', 'Лена'],
// ];

// $a['boys'][0];
// var_dump($a);

// array(2) {
//   ["boys"]=>
//   array(3) {
//     [0]=>
//     string(8) "Коля"
//     [1]=>
//     string(8) "Вася"
//     [2]=>
//     string(8) "Петя"
//   }
//   ["girls"]=>
//   array(3) {
//     [0]=>
//     string(8) "Даша"
//     [1]=>
//     string(8) "Маша"
//     [2]=>
//     string(8) "Лена"
//   }
// }

//
// $a = [
//     'boys' => ['Коля', 'Вася', 'Петя'],
//     'girls' => ['Даша', 'Маша', 'Лена'],
// ];

// echo $a['boys'][0];
// // Коля

// Примеры решения задач 

// Задача #1
// Задача. Дан массив с элементами 'Привет, ', 'мир' и '!'. Необходимо вывести на экран фразу 'Привет, мир!'. 

 // $a = ['Привет, ','мир','!'];
 // echo $a[0].$a[1].$a[2];
 // // Привет, мир!

//  Разберем это решение.
// Слово 'Привет, ' хранится под номером 0, это значит, что для доступа к нему мы должны написать $arr[0].
// Для доступа к слову 'мир' мы должны написать $arr[1], а $arr[2] содержит в себе '!'. Далее с помощью оператора 'точка' мы сложим три наши строки ('Привет, ', 'мир' и '!') в одну строку таким образом: $arr[0].$arr[1].$arr[2], и выведем на экран с помощью echo. 

//  Задача #2

// Задача. Решим немного другую задачу: дан массив с элементами 'Привет, ', 'мир' и '!'. Необходимо записать в переменную $text фразу 'Привет, мир!', а затем вывести на экран содержимое этой переменной.

 // $a = ['Привет, ','мир','!'];
 // $text = $a[0].$a[1].$a[2];
 // echo $text;

//  Задача #3

// Задача. Дан массив ['Привет, ', 'мир', '!']. Необходимо записать в первый элемент (то есть элемент с номером ноль) этого массива слово 'Пока, ' (то есть вместо слова 'Привет, ' будет 'Пока, '). 

// $a = ['Привет',', мир','!'];
// $a[0]='Пока';
// echo $a[0].$a[1].$a[2];
// // Пока, мир!

// Задача #4. Ассоциативные массивы
// Задача. Создайте массив заработных плат $arr. Выведите на экран зарплату Пети и Коли. 
    
//Этот массив дан:
// $a = ['Коля'=>'1000$', 'Вася'=>'500$', 'Петя'=>'200$'];
// $a = ['Анна'=>'2000$', 'Эльвира'=>'3000$', 'Эмануэль'=>'4000$'];
// // /**/var_dump($a);
// // array(3) {
// //   ["Анна"]=>
// //   string(5) "2000$"
// //   ["Эльвира"]=>
// //   string(5) "3000$"
// //   ["Эмануэль"]=>
// //   string(5) "4000$"
// // }
// // echo $a['Эмануэль'];
// // // 4000$

// // array(3) {
// //   ["Коля"]=>
// //   string(5) "1000$"
// //   ["Вася"]=>
// //   string(4) "500$"
// //   ["Петя"]=>
// //   string(4) "200$"
// // }

//  Задача #5. Способы создания массива
// Задача. Создайте массив $arr с элементами 1, 2, 3, 4, 5 тремя различными способами. 

// способ 1, индексация с 1
// $arr = ['1'=>'1', '2', '3', '4'];
// var_dump($arr);

// способ 2, стандартная индексация с 0
// $arr = [1, 2, 3, 4, 5];

// способ 3, стандартная индексация с 0
//     $arr[] = 1;
//     $arr[] = 2;
//     $arr[] = 3;
//     $arr[] = 4;
//     $arr[] = 5;
// var_dump($arr);

//  Задача #6. Многомерный массив
// Задача. Дан многомерный массив $arr: 

// $arr = [
//     'ru'=>['голубой', 'красный', 'зеленый'],
//     'en'=>['blue', 'red', 'green'],
// ];
// // var_dump($arr);
// // var_dump($arr['ru']);
// // echo $arr['ru'][0];
// голубой


//  Задачи для решения
// Работа с массивами

// Создайте массив $arr=['a', 'b', 'c']. Выведите значение массива на экран с помощью функции var_dump().

// С помощью массива $arr из предыдущего номера выведите на экран содержимое первого, второго и третьего элементов.

// Создайте массив $arr=['a', 'b', 'c', 'd'] и с его помощью выведите на экран строку 'a+b, c+d'.

// Создайте массив $arr с элементами 2, 5, 3, 9. Умножьте первый элемент массива на второй, а третий элемент на четвертый. Результаты сложите, присвойте переменной $result. Выведите на экран значение этой переменной.

// Заполните массив $arr числами от 1 до 5. Не объявляйте массив, а просто заполните его присваиванием $arr[] = новое значение.
// Ассоциативные массивы
// Создайте массив $arr. Выведите на экран элемент с ключом 'c'. 

// $arr = ['a'=>1, 'b'=>2, 'c'=>3];
// var_dump($arr);
// // array(3) {
// //   ["a"]=>
// //   int(1)
// //   ["b"]=>
// //   int(2)
// //   ["c"]=>
// //   int(3)
// // }

// Создайте массив $arr. Найдите сумму элементов этого массива. 

// $arr = ['a'=>1, 'b'=>2, 'c'=>3];
// $summ=$arr['a']+$arr['b']+$arr['c'];
// echo $summ;
// // 6

// Создайте массив заработных плат $arr. Выведите на экран зарплату Пети и Коли. 
// $arr = ['Коля'=>'1000$', 'Вася'=>'500$', 'Петя'=>'200$'];
// $summ = $arr['Коля']+$arr['Вася']+$arr['Петя'];
// echo $summ;

// //1700

// Создайте ассоциативный массив дней недели. Ключами в нем должны служить номера дней от начала недели (понедельник - должен иметь ключ 1, вторник - 2 и т.д.). Выведите на экран текущий день недели.

// Пусть теперь номер дня недели хранится в переменной $day, например там лежит число 3. Выведите день недели, соответствующий значению переменной $day.

// a	нижний регистр, выведение am или pm	"am" или "pm"
// A	верхний регистр, выведение AM или PM	"AM" или "PM"
// d	текущий день, 2 цифры с первым 0 	"01"-"31"
// F	Полное название месяца	«February»
// g	12-часовой формат времени, 0 в начале отсутствует	"1" до "12"
// G	24-часовой формат времени, с отсутствием в начале	0 "0"-"24"
// h	часы, 12-часовой формат, первый ноль. 	"01"-"12"
// H	часы, 24-часовой формат, первый ноль. 	"00" до "24"
// i	минуты "00"-"59"
// I	1 (день) и 0 (ночь)	"1","0"
// j	текущий день, 2 цифры без 0 в начале 	"1"-"31"
// l	Полное название текстом текущего дня недели 	"Monday"
// L	1 — если високосный год, в других случаях ноль	"1"-0"
// m	Месяц с 0 в начале 	"01"-12"
// M	Первые три буквы названия текущего месяца	“Feb”
// n	месяц (без нуля в начале) 	«1»- «12»
// r	вывод времени и даты в формате RFC 822 	"Thu, 21 Dec 2000 16:01:07 +0200"
// s	секунды. 	"00" до "59"
// S	Английское окончание 	"th" или "nd"
// t	Число дней в месяце 	"28"-"31"
// T	Часовой пояс 	"MDT"
// U	Число секунд с начала века 	"999869506"
// w	День недели по счету 	"0"(вс)-"6"(сб)
// Y	Год в виде 4 цифр 	"2015"
// y	Год в виде 2 цифр 	"15"
// z	день в году 	"0"-"365"
// Z	часовой пояс от Гринвича, выраженный в секундах (положительная для востока, отрицательная для запада) 	"-43200" - "43200"

// $arr = ['1'=>'понедельник', '2'=>'вторник', '3'=>'среда', '4'=>'четверг', '5'=>'пятница', '6'=>'суббота', '7'=>'воскресенье'];
// $day = date("w");
// echo 'Сейчас '.$arr[$day+1];
// // Сейчас среда
// // [Finished in 0.3s]

//  Многомерные массивы

// Создайте многомерный массив $arr. С его помощью выведите на экран слова 'joomla', 'drupal', 'зеленый', 'красный'. 

// $arr = [
//     'cms'=>['joomla', 'wordpress', 'drupal'],
//     'colors'=>['blue'=>'голубой', 'red'=>'красный', 'green'=>'зеленый']
// ];

// print_r($arr);
// Array
// (
//     [cms] => Array
//         (
//             [0] => joomla
//             [1] => wordpress
//             [2] => drupal
//         )

//     [colors] => Array
//         (
//             [blue] => голубой
//             [red] => красный
//             [green] => зеленый
//         )

// )

// var_export($arr);
// array (
//   'cms' => 
//   array (
//     0 => 'joomla',
//     1 => 'wordpress',
//     2 => 'drupal',
//   ),
//   'colors' => 
//   array (
//     'blue' => 'голубой',
//     'red' => 'красный',
//     'green' => 'зеленый',
//   ),
// )

// echo $arr['cms'][0];
// echo PHP_EOL;
// echo $arr['cms'][2];
// echo PHP_EOL;
// echo $arr['colors']['green'];
// echo PHP_EOL;
// echo $arr['colors']['red'];

// joomla
// drupal
// зеленый
// красный

// Создайте двухмерный массив. Первые два ключа - это 'ru' и 'en'. Пусть первый ключ содержит элемент, являющийся массивом названий дней недели по-русски, а второй - по-английски. Выведите с помощью этого массива понедельник по-русски и среду по английски (пусть понедельник - это первый день).

// Пусть теперь в переменной $lang хранится язык (она принимает одно из значений или 'ru', или 'en' - либо то, либо то), а в переменной $day - номер дня. Выведите словом день недели, соответствующий переменным $lang и $day. То есть: если, к примеру, $lang = 'ru' и $day = 3 - то выведем 'среда'.

// $arr = [
// 	'ru' => ['понедельник','вторник','среда','четверг','пятница','суббота','воскресенье'],
// 	'en' => ['monday','tuesday','wednesday','thursday','friday','suturday','sunday']
// ];

// echo $arr['ru'][0].'=>'.$arr['en'][0]; echo PHP_EOL;
// echo $arr['ru'][1].'=>'.$arr['en'][1]; echo PHP_EOL;
// echo $arr['ru'][2].'=>'.$arr['en'][2]; echo PHP_EOL;
// echo $arr['ru'][3].'=>'.$arr['en'][3]; echo PHP_EOL;
// echo $arr['ru'][4].'=>'.$arr['en'][4]; echo PHP_EOL;
// echo $arr['ru'][5].'=>'.$arr['en'][5]; echo PHP_EOL;
// echo $arr['ru'][6].'=>'.$arr['en'][6]; echo PHP_EOL;

// понедельник=>monday
// вторник=>tuesday
// среда=>wednesday
// четверг=>thursday
// пятница=>friday
// суббота=>suturday
// воскресенье=>sunday


// $arr = [
// 	'ru' => ['понедельник','вторник','среда','четверг','пятница','суббота','воскресенье'],
// 	'en' => ['monday','tuesday','wednesday','thursday','friday','suturday','sunday']
// ];
// $lang='ru';
// $day='3';
// echo $arr[$lang][$day];
// четверг

// БЛОК 1
// Работа с конструкциями if-else и switch-case

//  Конструкция if-else

// Для того, чтобы напрограммировать что-нибудь полезное, одних переменных далеко не достаточно. Нам нужен механизм, который позволит выполнять определенный код в зависимости от каких-либо условий.

// То есть нам нужно иметь возможность спросить у PHP 'Если'.

// Например так: если эта переменная меньше нуля, то вывести 'отрицательно', иначе (то есть если она больше нуля) вывести 'положительно'.

// В PHP для таких вопросов предназначена конструкция if, которая позволяет выполнять определенный код при выполнении какого-либо условия: 

// псевдо-код
    // if (логическое выражение) {
    //     Этот код выполниться,
    //     если логическое выражение верно (то есть равно true)
    // }
    // else 
    // {
    //     Этот код выполнится,
    //     если логическое выражение неверно (то есть равно false)
    // }

//  Обратите внимание на то, что блок else не обязателен.

// Логическое выражение представляет собой тот самый вопрос, который мы хотим задать PHP. Например, чтобы спросить 'переменная $a больше нуля' мы напишем так: $a > 0.

// Примеры работы: 
    // $a = 3;
    /*
        Если переменная $a больше нуля, то выведи 'верно',
        иначе (если меньше или равна нулю) выведи 'неверно'
    */
    // if ($a > 0) {echo 'Верно!';} else {echo 'Неверно!';} //выведет 'Верно!'
//верно

//  Обратите внимание на то, что блок else не обязателен.

// Логическое выражение представляет собой тот самый вопрос, который мы хотим задать PHP. Например, чтобы спросить 'переменная $a больше нуля' мы напишем так: $a > 0.

// Примеры работы: 

    // $a = -3;

    /*
        Если переменная $a больше или равна нулю, то выведи 'верно',
        иначе (если меньше нуля) выведи 'неверно'
    */
    // if ($a >= 0) {echo 'Верно!';} else {echo 'Неверно!';} //выведет 'Неверно!'


//  Сокращенный синтаксис

// В случае, если в фигурный скобках if или else будет только одно выражение, можно эти фигурные скобки не писать: 
    //Полный вариант:
    // if ($a == 0) {echo 'Верно!';} else {echo 'Неверно!';}
    // Верно!

    //Уберем скобки после if:
    // if ($a == 0) echo 'Верно!'; else {echo 'Неверно!';}
	// Верно!    

    //Уберем скобки после else:
    // if ($a == 0) {echo 'Верно!';} else echo 'Неверно!';  
	// Верно!    

    /*
        Уберем скобки и после if, и после else
        (обратите внимание на точку с запятой - она осталась):
    */
    // if ($a == 0) echo 'Верно!'; else echo 'Неверно!'; 
    // Верно!    

//  Равенство по значению и типу

// Для того, чтобы сравнить на равенство следует использовать оператор двойное равно ==, а не одиночное =, как можно было подумать.

// Почему так? Потому что одиночное равно зарезервировано за присваиванием. Смотрите пример: 

// $a = 0;
/*
    Если переменная $a равна нулю, то выведи 'верно',
    иначе (если не равна нулю) выведи 'неверно'
*/
// if ($a == 0) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!'

// $a = 0;
    /*
        Мы думаем оно работает так:
            если переменная $a равна нулю, то выведи 'верно',
            иначе (если не равна нулю) выведи 'неверно'.

        На самом деле оно работает так:
            переменной $a присвоить 1,
            если удалось присвоить - то выведи 'верно',
            иначе (если не удалось присвоить) выведи 'неверно'.
    */
// if ($a = 1) echo 'Верно!'; else echo 'Неверно!'; //всегда будет выводить 'Верно!'

//  Кроме оператора == существует еще и оператор ===. Их различие в том, что === сравнивает не только по значению, но и по типу, а == сравнивает только по значению.

// Чтобы полностью разобраться в этом, внимательно изучите примеры: 

// $a = '0'; //переменная $a представляет собой строку, а не число 0
// if ($a == 0) echo 'Верно!'; else echo 'Неверно!';

/*
    Выведет 'Верно!', так как проверяется только значение, но не тип.
    Поэтому '0' равен 0.
*/

// $a = '0'; //переменная $a представляет собой строку, а не число 0
// if ($a === 0) echo 'Верно!'; else echo 'Неверно!';

// /*
//     Выведет 'Неверно!', так как строка '0'
//     не равна числу 0 при сравнении по типу.
// */

//  Не равно

// Для того, чтобы спросить 'не равно', существует операторы != и !==. Первый игнорирует различие в типах, а второй - нет. 

// $a = 0;
//     Если переменная $a НЕ равна нулю, то выведи 'верно',
//     иначе (если не равна нулю) выведи 'неверно'
// if ($a != 0) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!', так как $a равно 0

// // Неверно!


// $a = 1;
//         Если переменная $a НЕ равна нулю, то выведи 'верно',
//         иначе (если не равна нулю) выведи 'неверно'    
// if ($a != 0) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Неверно!', так как $a равно 0

// $a = '0';
/*
    Если переменная $a НЕ равна нулю, то выведи 'верно',
    иначе (если не равна нулю) выведи 'неверно'
*/
// if ($a != 0) echo 'Верно!'; else echo 'Неверно!';
/*
    Выведет 'Неверно!', так как $a равно '0',
    а различие в типах игнорируется.
*/

// Возможные операции сравнения, которые можно использовать внутри if:
// $a == $b 	$a равно $b
// $a === $b 	$a равно $b и они одинаковы по типу
// $a != $b 	$a не равно $b
// $a !== $b 	$a не равно $b или $a равно $b, но ни разные по типу
// $a < $b 	$a меньше $b
// $a > $b 	$a больше $b
// $a <= $b 	$a меньше или равно $b
// $a >= $b 	$a больше или равно $b

//  Функция empty
// Зачастую в веб-программировании возникает следующая проблема: необходимо проверить переменную на пустоту.
// Переменная будет пустая, если она равна нулю, '' (пустой строке), false или null (то есть не определена ранее).
// Проверка на пустоту выполняется с помощью функции empty(): 

// $a = null;
// //Если $a пустое, то...
//    if (empty($a)) echo 'Верно!'; 
//    else echo 'Неверно!'; //выведет 'Верно!'

// $a = 0;
// //Если $a пустое, то...
// if (empty($a)) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!'

// $a = '';
// //Если $a пустое, то...
// if (empty($a)) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!'

// $a = 'hi';
// //Если $a пустое, то...
// if (empty($a)) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Неверно!', так как $a не пустая

// Чаще возникает обратная задача - проверка на то, что переменная является НЕ пустой. Отрицание НЕ можно сделать с помощью оператора '!': 

// $a = null;
// //Если $a Непустое, то...
// if (!empty($a)) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Неверно!', так как $a пустое

//  Функция isset

// Аналогом empty является функция isset. Она проверяет существует ли переменная (то есть то, что она не равна null). Смотрите примеры: 

// $a = 'hello';
// //Если $a существует, то...
// if (isset($a)) echo 'Верно!'; else echo 'Неверно!';
// /*
//     Выведет 'Верно!', так как $a существует.
// */

// $a = 0;
// //Если $a существует, то...
// if (isset($a)) echo 'Верно!'; else echo 'Неверно!';
// /*
//     Выведет 'Верно!', так как $a существует.
// */

/*
    Пусть переменную $a вообще не определяли выше в коде
    (это все равно, что присвоить ей null).

    Если $a существует, то...
*/
// if (isset($a)) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Неверно!'


// Аналогично проверятся на НЕ существование (через !isset): 

// $a = 3;
//Если $a НЕ существует то...
// if (!isset($a)) echo 'Верно!'; else echo 'Неверно!';
/*
    Выведет 'Неверно!', так как $a существует.
*/  

//  Несколько условий сразу: or и and

// Иногда может быть нужно составить какое-то сложное условие, например, пользователь вводит месяц своего рождения и вам нужно проверить, что введенное число больше или равно 1 и меньше либо равно 12 (так как в году 12 месяцев).

// Для этого существуют операторы and (логическое И) и or (логическое ИЛИ). 

// $a = 3;
// $b = -3;
// //Если $a больше нуля и $b одновременно меньше нуля то...
// if ($a > 0 and $b < 0) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!'

// $a = 3;
// //Если $a больше или равно 1 и меньше или равно 12 то...
// if ($a >= 1 and $a <= 12) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!'

// $a = -3;
// $b = -3;
// /*
//     Если $a больше нуля ИЛИ $b меньше нуля - хотя бы один из них, то...
//     выведет 'Верно!', так как хотя $a и не больше нуля,
//     но одно из условий -  $b < 0 - выполнится!
// */
// if ($a > 0 or $b < 0) echo 'Верно!'; else echo 'Неверно!';

// // Верно!Верно!Верно!

// Вместо and можно писать &&, а вместо or - ||. 

// Работа с логическими переменными

// Многие функции PHP в результате своей работы возвращают либо true (истина), либо false (ложь). Эти значения довольно удобны при своей работе, но новичкам бывает довольно сложно понять их.

// Представим себе, что переменная $a равна true. В таком случае конструкцию if можно записать так: 

// $a = true;

// //Если $a равно true, то...
// if ($a == true) echo 'Верно!'; else echo 'Неверно!';

/*
    Выведет 'Верно!', так как $a равно true.
*/

//  Так как такие сравнения довольно распространены в PHP, то существует специальный прием, облегчающий работу (но не понимание, к сожалению).

// Прием такой: конструкцию $a == true можно заменить на более простую: вместо if ($a == true) написать if ($a) и она будет работать аналогично.

// Следует пользоваться второй конструкцией, так как она проще. 

    /*
        Заменим  $a == true на более простую:
        вместо if ($a == true) напишем if ($a):
    */

// $a = true;
// //Если $a равно true, то...
// if ($a) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!', так как $a равно true

// $a = true;
// //Если $a НЕ true (то есть false!), то...
// if (!$a) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Неверно!', так как $a равно true      

// // Верно!Неверно!

// Также обратите внимание на следующие примеры: 

// //Данное выражение всегда будет выводить 'Верно'
// if (true) echo 'Верно!'; else echo 'Неверно!';
// //Данное выражение всегда будет выводить 'Неверно'
// if (false) echo 'Верно!'; else echo 'Неверно!';
// //Данное выражение всегда будет выводить 'Неверно'
// if (!true) echo 'Верно!'; else echo 'Неверно!';
// //Данное выражение всегда будет выводить 'Верно'
// if (!false) echo 'Верно!'; else echo 'Неверно!';

// Верно!Неверно!Неверно!Верно!

// if (false == false) echo 'Верно'; else echo 'Неверно';
// // Верно
// if (!true == !true) echo 'Верно'; else echo 'Неверно';
// // Верно

//  Работа вместе с HTML

// PHP устроен таким образом, что его можно использовать в одном файле с HTML. Представьте, что у нас возникает такая задача: если пользователь авторизован - вывести его логин, иначе ссылку на авторизацию. Ее можно решить, смешивая PHP код и HTML код вместе.

// Посмотрите примеры: 

// $a = true;
// if ($a) {
//     //Данный HTML код будет виден на экране только если $a равно true
//     echo '<p>Здесь выведем какой-то HTML!</p>';
// }
// // <p>Здесь выведем какой-то HTML!</p>

// Однако, очень часто это может оказаться неудобным, особенно если размеры HTML кода очень большие. Поэтому можно воспользоваться следующим приемом с разрывом PHP: 


    //Пример на работу вместе с HTML

    // $a = true;
    // if ($a) {

        /*
            Мы оборвали PHP, но HTML код ниже
            все равно будет виден на экране только если $a равно true.
        */
            // <p>Здесь выведем какой-то HTML!</p>
//    ? >

//   <? php
        /*
            Здесь мы продожаем PHP, открыв скобку <?php
            и закрываем фигурную скобку от ифа.
        */
//    }
///////////////////////////////////////////////////////////////////////////

//  Вложенные if

// Предположим, нам необходимо спросить у PHP такую вещь: если переменная $a пуста, то вывести 'Введите $a', если не пуста, то проверить - больше нуля $a или нет. Если больше нуля - то вывести 'Больше нуля!', если меньше - вывести 'Меньше нуля'.

// Одной конструкцией if здесь не обойтись, нужно использовать две таким образом, чтобы одна была внутри другой: 

    // if (empty($a)) { //если переменная $a пуста
    //     echo 'Введите $a!';
    // } else { //если переменная $a НЕ пуста
    //     if ($a > 0) { //спрашиваем, больше ли нуля переменная $a
    //         echo 'Больше нуля!'; 
    //     } else {
    //         echo 'Меньше нуля!'; 
    //     }
    // }
    //     <!-- <p>Здесь выведем какой-то HTML!</p> -->
    // Больше нуля!

//  Конструкция elseif

// Недостатком конструкции предыдущего примера является большое количество фигурных скобок. Поэтому была изобретена специальная конструкция elseif (пишется слитно!), которая представляет собой одновременно и else, и начало вложенного if: 

//Решение предыдущей задачи через конструкцию elseif
    // if (empty($a)) {
    //     echo 'Введите $a!';
    // } elseif ($a > 0) { //одновременно выполняется else для empty($a) и спрашивается больше ли $a нуля
    //     echo 'Больше нуля!';
    // } else {
    //     echo 'Меньше нуля!';
    // }

    //     <!-- <p>Здесь выведем какой-то HTML!</p> -->
    // Больше нуля!

// Можно использовать несколько elseif, но злоупотреблять этим не стоит (лучше будет воспользоваться конструкцией switch-case, о которой ниже). 

//  Несколько if

// Пусть у нас есть такая задача: сайт поддерживает 3 языка - русский, английский, немецкий. Переменная $lang может принимать 3 значения - 'ru', 'en' и 'de'. В зависимости от значения переменной $lang следует вывести фразу на одном из языков.

// Решение: можно было бы воспользоваться вложенными ифами или elseif. Выглядело бы это примерно так: 

// //Решение задачи через elseif – не самое удачное
// if ($a == 'ru') { //фраза на русском
//     echo 'Русский текст';
// } elseif ($a == 'en') { //фраза на английском
//     echo 'Английский текст';
// } elseif ($a == 'de') { //фраза на немецком
//     echo 'Немецкий текст';
// }

// Такое решение не слишком красивое - блок else здесь не нужен! Проще всего будет написать не один длинный if с несколькими else, а несколько if вообще без else: 

//Решение задачи через несколько if – оно намного лучше
// if ($a == 'ru') { //фраза на русском
//     echo 'Русский текст';
// } 
// if ($a == 'en') { //фраза на английском
//     echo 'Английский текст';
// }
// if ($a == 'de') { //фраза на немецком
//     echo 'Немецкий текст';
// }
/*
    В данном коде сработает только один из ифов,
    так как $a может иметь только одно из значений
*/

//     <!-- <p>Здесь выведем какой-то HTML!</p> -->
// Русский текстАнглийский текстНемецкий текст

//  Однако, это решение тоже не слишком удобно. Представьте, что у вас будет не три языка, а 10 - вам придется написать 10 конструкций if.

// Для таких случаев существует конструкция switch-case. 

//  Конструкция switch-case

// Конструкция switch-case представляет собой альтернативу if-else, ее рекомендуется использовать в случае множественного выбора (например, 10 различных языков, как в нашей задаче).

// Изучите ее синтаксис: 

    // switch ($переменная) {
    //     case 'значение1':
    //         здесь код, который выполнится в случае, если переменная имеет значение1;
    //     break;
    //     case 'значение2':
    //         здесь код, который выполнится в случае, если переменная имеет значение2;
    //     break;
    //     case 'значение3':
    //         здесь код, который выполнится в случае, если переменная имеет значение3;
    //     break;
    //     default:
    //         этот код выполнится в случае, если переменная не совпала ни с одним значением;
    //     break;
    // }

// Решим нашу задачу с тремя языками с помощью данной конструкции: 

    // switch ($lang) {
    //     case 'ru':
    //         echo 'Русский текст';
    //     break;
    //     case 'en': 
    //         echo 'Английский текст';
    //     break;
    //     case 'de': 
    //         echo 'Немецкий текст';
    //     break;
    //     default:
    //         echo 'Данный язык не поддерживается'; 
    //     break;
    // }
    // // Данный язык не поддерживается

//  Примеры решения задач
// Задача. Если переменная $a равна 10, то выведите 'Верно', иначе выведите 'Неверно'. 

// $a=10;
// if ($a==10) {echo 'Верно';} else {echo 'Неверно';}
//     Верно

// Задача. В переменной $min лежит число от 0 до 59. Определите в какую четверть часа попадает это число (в первую, вторую, третью или четвертую). 

// $min = random_int(0, 59);
// echo 'Число '.$min.' попало в(о) ' ;
// if ($min>=0 and $min<=15) {echo '1/4';}
// elseif ($min>15 and $min<=30) {echo '2/4';}
// elseif ($min>30 and $min<=45) {echo '3/4';}
// elseif ($min>45 and $min<=60) {echo '4/4';}
    // Число 15 попало в(о) 2/4
// https://im0-tub-ru.yandex.net/i?id=ba45c8971789a61b6334396d903db136-l&n=13    
// https://im0-tub-ru.yandex.net/i?id=07343670c9d285a3b36899fe2e906ce8-l&n=13    
// https://im0-tub-ru.yandex.net/i?id=1ea7b9599fa84d474e1d374f89f0b4d3-l&n=13

// Задача. Переменная $lang может принимать два значения: 'ru' и 'en'. Если она имеет значение 'ru', то в переменную $arr запишем массив дней недели на русском языке, а если имеет значение 'en' – то на английском. Решите задачу через 2 if, через switch-case и через многомерный массив без ифов и switch. 

// $arr = [
// 	'ru' => ['понедельник','вторник','среда','четверг','пятница','суббота','воскресенье'],
// 	'en' => ['monday','tuesday','wednesday','thursday','friday','suturday','sunday']
// ];

// $arr = [];    
// $rus = ['1'=>'понедельник', '2'=>'вторник', '3'=>'среда', '4'=>'четверг', '5'=>'пятница', '6'=>'суббота', '7'=>'воскресенье'];
// $eng = ['1'=>'monday','2'=>'tuesday','3'=>'wednesday','4'=>'thursday','5'=>'friday','6'=>'suturday','7'=>'sunday'];
// $lang = 'en';
// $day = date("w");
// $arr[$day++]; 
// if ($lang=='ru') {$arr=$rus;}
// if ($lang=='en') {$arr=$eng;}
// echo $arr[$day];
//     // friday

// Решение через switch-case: 

// $lang = 'eng';    
// $day = date("w");
// $day++; //в анг. неделя с воскресенья
// $arr = [];    
// $rus = ['1'=>'понедельник', '2'=>'вторник', '3'=>'среда', '4'=>'четверг', '5'=>'пятница', '6'=>'суббота', '7'=>'воскресенье'];
// $eng = ['1'=>'monday','2'=>'tuesday','3'=>'wednesday','4'=>'thursday','5'=>'friday','6'=>'suturday','7'=>'sunday'];
// switch ($lang) {
// 	case 'ru':
// 		$arr=$rus;
// 		break;
// 	case 'eng':
// 		$arr=$eng;
// }
// echo $arr[$day];
// // friday

// Решение через многомерный массив: 

// $lang = 'ru';
// $day = date("w");
// $day++; //в анг. неделя с воскресенья
// $arr = [
//     'ru'=>['пн', 'вт', 'ср','чт', 'пт', 'сб', 'вс'],
//     'en'=>['mn', 'ts', 'wd', 'th', 'fr', 'st', 'sn'],
// ];

// var_dump($arr[$lang]);

//     array(7) {
//   [0]=>
//   string(4) "пн"
//   [1]=>
//   string(4) "вт"
//   [2]=>
//   string(4) "ср"
//   [3]=>
//   string(4) "чт"
//   [4]=>
//   string(4) "пт"
//   [5]=>
//   string(4) "сб"
//   [6]=>
//   string(4) "вс"
// }

// Решение через многомерный массив 2: 

// $arr['ru'][1] = 'пн';
// $arr['ru'][2] = 'вт';
// $arr['ru'][3] = 'ср';
// $arr['ru'][4] = 'чт';
// $arr['ru'][5] = 'пт';
// $arr['ru'][6] = 'сб';
// $arr['ru'][7] = 'вс';

// $arr['en'][1] = 'mn';
// $arr['en'][2] = 'ts';
// $arr['en'][3] = 'wd';
// $arr['en'][4] = 'th';
// $arr['en'][5] = 'fr';
// $arr['en'][6] = 'st';
// $arr['en'][7] = 'sn';

// $lang='en';
// var_dump($arr[$lang]);

// Решение через многомерный массив 3: 

// $arr = array ('ru' => array('пн','вт','ср','чт','пт','сб','вс'), 
// 			  'en' => array('mn','ts','wd','th','fr','st','sn'), 
// 			 );

// $lang='ru';
// var_dump($arr[$lang]);

// Решение через многомерный массив 4: 
// Доступ к элементу многомерного массива осуществляется путем указания всех его индексов. Например, чтобы получить доступ ко второму массиву (который лежит в первом массиве) мы должны задействовать вторую пару квадратных скобок. Теперь элемент массива $arr['ru'][0] содержит значение 'пн'.

// $arr = array ('ru' => array('пн','вт','ср','чт','пт','сб','вс'), 
// 			  'en' => array('mn','ts','wd','th','fr','st','sn'), 
// 			 );
// $lang='ru';

// echo $arr[$lang][0];
//  Вывод многомерного массива. FOREACH

// Чтобы вывести все элементы многомерного массива можно использовать цикл foreach. Воспользуемся циклом foreach и извлечем все элементы из нашего примера.

// foreach ($arr as $lang => $massiv) 
// 	{
// 	foreach ($massiv as $inner_key => $value) 
// 		{
// 			echo "[$lang][$inner_key] = $value";
// 		}
// 	}

    // [ru][0] = пн[ru][1] = вт[ru][2] = ср[ru][3] = чт[ru][4] = пт[ru][5] = сб[ru][6] = вс[en][0] = mn[en][1] = ts[en][2] = wd[en][3] = th[en][4] = fr[en][5] = st[en][6] = sn

//  Задачи для решения
// Работа с if-else

// Если переменная $a равна нулю, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 1, 0, -3.
// $a=2;
// if ($a == 0) {echo "True";}
// elseif ($a<>0) {echo "False";}
// False

// Если переменная $a больше нуля, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 1, 0, -3.
// $a=0;    
// if ($a>0) {echo "True";}
// elseif ($a<=0) {echo "False";}
//False

// Если переменная $a меньше нуля, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 1, 0, -3.
// $a=-1;    
// if ($a<0) {echo "True";}
// elseif ($a>=0) {echo "False";}
// //True

// Если переменная $a больше или равна нулю, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 1, 0, -3.
// $a=0;    
// if ($a>=0) {echo "True";}
// elseif ($a<0) {echo "False";}
// //True    

// Если переменная $a меньше или равна нулю, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 1, 0, -3.
// $a=0;
// if ($a<=0) {echo "True";}
// elseif ($a>0) {echo "False";}
// //True

// Если переменная $a не равна нулю, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 1, 0, -3.
// $a=1;    
// if ($a!=0) {echo "True";}
// else {echo "False";}
// // True

// Если переменная $a равна 'test', то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 'test', 'тест', 3.
// $a='test';
// $a='тест';
// $a=3;
// if ($a=='test') {echo "True";}
// else {echo "False";}

// Если переменная $a равна '1' и по значению и по типу, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном '1', 1, 3.
// $a='1';
// // $a=1;
// // $a=3;
// if ($a===1) {echo "Верно";}
// else {echo "Неверно";}

///////////////
//  Работа с empty и isset

// Если переменная $a пустая, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 1, 3, -3, 0, null, true, '', '0'.
// $a=null;
// $a=0;

// $a=false;
// if (empty($a)) echo "True";
// else echo "False";
// // true

// Если переменная $a НЕ пустая, то выведите 'Верно', иначе выведите 'Неверно'.
// $a=1;
// if (!empty($a)) echo "True";
// else echo "False";
// // True


// Если переменная $a существует, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 3 и null.
// $a = 3;
// if (isset($a)) echo 'Верно!'; else echo 'Неверно!';

// Если переменная $a НЕ существует, то выведите 'Верно', иначе выведите 'Неверно'.
// Работа с логическими переменными
// $a=null;
// if (!isset($a)) echo 'True'; else echo 'False';

// Если переменная $var равна true, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $var, равном true, false. Напишите два варианта скрипта - с короткой записью и с длинной.
// $var = false;
// if ($var == 'true') echo 'True'; else echo 'False';
// //False

// Если переменная $var НЕ равна true, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $var, равном true, false. Напишите два варианта скрипта - с короткой записью и с длинной.
// Работа с OR и AND
// $var = true;
// if ($var==true) echo 'Верно'; else 'Неверно';
// //Верно

// Если переменная $a больше нуля и меньше 5-ти, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при $a, равном 5, 0, -3, 2.
// $a=1;
// if ($a>0 and $a<5) echo "True"; else echo "False";
// //True

// Если переменная $a равна нулю или равна двум, то прибавьте к ней 7, иначе поделите ее на 10. Выведите новое значение переменной на экран. Проверьте работу скрипта при $a, равном 5, 0, -3, 2.
// $a = 0;
// if ($a==0) {$a+=7;} else {$a/=10;}
// echo $a;
// //    7

// Если переменная $a равна или меньше 1, а переменная $b больше или равна 3, то выведите сумму этих переменных, иначе выведите их разность (результат вычитания). Проверьте работу скрипта при $a и $b, равном 1 и 3, 0 и 6, 3 и 5.
// $a=2;
// $b=4;
// if ($a<=1 and $b>=3) {echo $a+=$b;} else {echo 'a='.$a.' b='.$b.' ';}

// Если переменная $a больше 2-х и меньше 11-ти, или переменная $b больше или равна 6-ти и меньше 14-ти, то выведите 'Верно', в противном случае выведите 'Неверно'.
// На switch-case
// $a=3;
// if (($a>2 and $a<11) or ($b>=6 and $b<14)) {echo 'Hello';}
// else echo "None";

// Переменная $num может принимать одно из значений: 1, 2, 3 или 4. Если она имеет значение '1', то в переменную $result запишем 'зима', если имеет значение '2' – 'лето' и так далее. Решите задачу через switch-case.
// Задачи

// $result=0;
// $num=1;
// switch ($num) {
//         case '1':
//             {$result='Зима'; echo $result;}
//         break;
//         case '2': 
//             {$result='Лето'; echo $result;}
//         break;
//         case '3': 
//             {$result='Весна'; echo $result;}
//         break;
//         case '4': 
//             {$result='Осень'; echo $result;}
//         break;
//     }
// PHP_EOL;
// // Зима

// var_dump($num);


// В переменной $day лежит какое-то число из интервала от 1 до 31. Определите в какую декаду месяца попадает это число (в первую, вторую или третью).

    // Дека́да — совокупность из 10 частей. В древности — группа, состоящая из десяти каких-либо единиц (например, при счёте солдат, дней и так далее). 

// $day=random_int(1, 31);
// //У нас не будет значение 0 декады, так как не генерятся нули. Защиты от дурака нет
// //31-е число - 4-я декада по идее
// // $day=31;
// $dec=$day/10;
// echo 'День '.$day.'-й находится в '.ceil($dec).' декаде';
// //День 27-й находится в 3 декаде

// В переменной $month лежит какое-то число из интервала от 1 до 12. Определите в какую пору года попадает этот месяц (зима, лето, весна, осень).
// https://goo-gl.ru/5EXp~s

// $month=random_int(1, 12);
// $pora=$month;
// switch ($pora) {
//         case ($pora==12 or $pora==1 or $pora==2):
//             {$result='зима';}
//         break;
//         case ($pora==3 or $pora==4 or $pora==5):
//             {$result='весна';}
//         break;
//         case ($pora==6 or $pora==7 or $pora==8):
//             {$result='лето';}
//         break;
//         case ($pora==9 or $pora==10 or $pora==11):
//             {$result='осень';}
//         break;
//     }
//  echo 'Месяц '.$month.' относится к времени года '.$result;
//     //Месяц 7 относится к времени года лето 

// В переменной $year хранится год. Определите, является ли он високосным (в таком году есть 29 февраля). Год будет високосным в двух случаях: либо он делится на 4, но при этом не делится на 100, либо делится на 400. Так, годы 1700, 1800 и 1900 не являются високосными, так как они делятся на 100 и не делятся на 400. Годы 1600 и 2000 - високосные, так как они делятся на 400.
// $year=random_int(1700, 2019);
// $year=2004;
// $a=$year;
// $b=400;
// echo $year.' ';
// //если делится на 4 без остатка, то 
// if ( ((($a % 4) == 0) and (($a%100)!=0)) or (($a%$b) == 0) )  echo 'делится на 4 и не делится на 100 или делится на 400 | год високосный ';
// else echo 'не делится на 400 | год не високосный ';

// // високосные годы для проверки
// // 2000, 2004, 2008, 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040 

// Дана строка с символами, например, 'abcde'. Проверьте, что первым символом этой строки является буква 'a'. Если это так - выведите 'да', в противном случае выведите 'нет'.
// $str='abcde';
// if ($str[0]=='a') echo 'да';
// else echo 'нет';
// //    да


// Дана строка с цифрами, например, '12345'. Проверьте, что первым символом этой строки является цифра 1, 2 или 3. Если это так - выведите 'да', в противном случае выведите 'нет'.
// $str = '12345';
// if ($str[0]=='1') echo 'да';
// else echo 'нет';
//    да

// Дана строка из 3-х цифр. Найдите сумму этих цифр. То есть сложите как числа первый символ строки, второй и третий.
// $str='123';
// $sum=$str[0]+$str[1]+$str[2];
// echo $sum;
// // 6

// Дана строка из 6-ти цифр. Проверьте, что сумма первых трех цифр равняется сумме вторых трех цифр. Если это так - выведите 'да', в противном случае выведите 'нет'.
// // $str='123456';
// $str='123123';
// $sum1=$str[0]+$str[1]+$str[2];
// $sum2=$str[3]+$str[4]+$str[5];
// if ($sum1==$sum2) echo 'да';
// else echo 'нет';
// //да 

//Самостоятельное задание. Определить день недели с возможностью выбора языка $lang
// $arr = [];    
// $rus = ['1'=>'понедельник', '2'=>'вторник', '3'=>'среда', '4'=>'четверг', '5'=>'пятница', '6'=>'суббота', '7'=>'воскресенье'];
// $eng = ['1'=>'monday','2'=>'tuesday','3'=>'wednesday','4'=>'thursday','5'=>'friday','6'=>'suturday','7'=>'sunday'];
// $lang = 'ru';
// $day = date("w");
// $arr[$day++]; 
// if ($lang=='ru') {$arr=$rus;}
// if ($lang=='en') {$arr=$eng;}
// echo $arr[$day];
// //вторник

// БЛОК 1
// Работа с циклами foreach, for, while
//(*************************************************************************************)//
//  Циклы используются для того, чтобы некоторый участок кода выполнился несколько раз подряд.
// Зачем это нужно - представьте, что вам нужно возвести в квадрат 100 элементов массива. Если обращаться к каждому элементу отдельно по его ключу - это займет 100 строчек кода, и для того, чтобы написать этот код, нужно будет потратить довольно много времени.
// Но это не нужно - у нас есть возможность сделать так, чтобы PHP выполнил за нас некоторую операцию нужное количество раз. Например, возвел все элементы массива в квадрат.
// Делается это с помощью циклов.
// Есть три вида циклов: foreach, while и for. Давайте разберемся, как с ними работать и чем они отличаются друг от друга. 

//  Цикл foreach
// Цикл foreach используется для прохождения по всем элементам массива.
// Синтаксис такой: пишется ключевое слово foreach, а после него круглые скобки ( ). В этих скобках указывается переменная, в которой лежит массив, потом слово as, а после него - переменная, в которую при каждом проходе цикла будет ложится элемент массива.
// К примеру, это может выглядеть так - foreach($arr as $elem), где $arr - это массив, а в переменную $elem будут ложиться элементы массива. Имя переменной $elem вы придумываете сами в момент создания цикла - какое придумаете, в ту переменную и будут попадать элементы массива.
// После команды foreach() должны идти фигурные скобки {}. Код, который лежит в этих скобках, называется телом цикла.
// Этот код будет выполняться столько раз, сколько проходов сделает цикл. А он сделает столько проходов, сколько элементов у нашего массива.
// Итак, синтаксис цикла foreach выглядит так: 

    // foreach ($arr - имя_массива as $elem – переменная_для_элемента_массива) {
        
	//    //         Код, который находится между фигурными скобками будет повторяться 
	//    //         столько раз, сколько элементов у массива.
        
    // }

//  Давайте решим следующую задачу: пусть дан массив $arr с пятью элементами, выведем столбец этих элементов с помощью цикла foreach.

// Будем при каждом проходе цикла выводить на экран (с помощью echo) текущий элемент массива (тот, что лежит в переменной $elem), и ставить после него тег br, чтобы получался столбец элементов, а не строка: 
// $arr=[1,2,3,4,5];
// foreach ($arr as $elem => $value) {
// 	echo $item.' <br> ';
// 	echo PHP_EOL;
// }
// // 0 <br> 
// // 1 <br> 
// // 2 <br> 
// // 3 <br> 
// // 4 <br> 

// Цикл foreach - очень мощная и полезная вещь, его следует использовать в том случае, если вам необходимо выполнить какие-либо действия с каждым элементом массива по отдельности, например, возвести их в квадрат: 

//Возведем в квадрат каждый элемент следующего массива:
$arr = [1, 2, 3, 4, 5];
foreach ($arr as $elem) 
	{
		foreach ($arr as $elem => $value) 
			{
				echo $elem.' ';
			}
	}









echo PHP_EOL;
?>