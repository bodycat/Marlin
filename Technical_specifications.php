<?php
// Операции инкремента и декремента 
// $a = 1;
// $a++; //увеличит $a на 1, что соответствует коду $a = $a + 1;
// echo $a; //выведет 2

// $a = 1;
// $a--; //уменьшит $a на 1, что соответствует коду $a = $a - 1;
// echo $a; //выведет 0

// Давайте посмотрим, в каких случаях проявляется разница между ++a и a++.
// Пусть у нас есть код echo ++a и код echo a++.
// В первом случае переменная сначала увеличится на единицу, а потом выведется, а во втором случае - сначала выведется, а потом увеличится. 
 
// Операции +=, -=, *=, /= 
// $a = 2;
// $b = $a + 2;
// echo $b;
// 4
// var_dump($b);
// int 4

// $a = 1;
// $a +=3; // $a = $a + 3;

// Кроме того, существуют операторы -=, *=, /=, которые эквивалентны следующему коду: 

// $a = 2;
// $a -= 3; // $a = $a - 3;

// $a = 2;
// $a /= 3; // $a = $a / 3;

// Операция .=
// слияние

// $str = 'abc';
// $str .= 'def'; //этот код полностью эквивалентен коду 
// echo $str;
// //$str = $str . 'def';

// Типизация переменных
// Что будет, если попробовать сложить, к примеру, число и строку, вот так: 3+'3'? В результате вы получите число 

// $a = 3;
// $b = '3';
// $c = $a + $b;
// перенос строки не работает с разметкой
// echo '<br/>';
// echo 'n/r';
// зато работает другой метод, который подходит и для кроссплатформенности  PHP_EOL
// echo $c;
// echo PHP_EOL;
// nl2br — Inserts HTML line breaks before all newlines in a string
// nl2br ( string $string [, bool $is_xhtml = TRUE ] ) : string
// Returns string with <br /> or <br> inserted before all newlines (\r\n, \n\r, \n and \r). 

// Example
// echo nl2br("foo isn't\n bar");
// The above example will output:
// foo isn't<br />
//  bar

//Ответ: он сложит числа, переведет к правильному формату данных
// var_dump($c);
// 6
// int(6)
// PHP автоматически осуществляет преобразование типов при необходимости, вам не нужно за это переживать. 

// То же самое случится, если, к примеру, сделать так: 3+true или 3+false. 
// Попробуйте эти примеры сами и узнайте к чему преобразуется true в этом случае, а чему - false. 

// Примеры решения задач
// Задача

// Задача. Создайте переменную $var и присвойте ей значение 'hello'. Обращаясь к отдельным символам этой строки выведите на экран символ 'h', символ 'e', символ 'o'. 
// $var = 'hello';
// // echo $var[0];
// // echo $var[1];
// // echo $var[2];
// // echo $var[3];
// // echo $var[4];
// // решим циклом
// $num = 0;
// $len_ = strlen($var);
// // или перебор
// while ($num <= $len_) {
//        // echo "$hello";    
// 		echo($var[$num]);
// 	    echo PHP_EOL;
//        // echo "Итерация номер: $num";     
//    $num++; // Внимание! Тут увеличиваем количество показов. Теперь +1
//    // И снова возвращаемся в начало цикла. Проверять, не достигло ли $num значения 5
//    // Если $num не увеличивать с каждым ходом цикла, то цикл будет бесконечным!
//    } 
//   echo PHP_EOL;

// Итерация номер: 1
// Итерация номер: 2
// Итерация номер: 3
// Итерация номер: 4
// Итерация номер: 5
// [Finished in 0.1s]  

// Задача. Переделайте приведенный код так, чтобы в нем использовались операции +=, -=, *=, /=, ++, --. Количество строк кода при этом не должно измениться. Код для переделки: 
// // До
// $var = 1;
// $var = $var + 12;
// $var = $var - 14;
// $var = $var * 5;
// $var = $var / 7;
// $var = $var + 1;
// $var = $var - 1;
// echo $var;
// // После
// $var = 1;
// $var += 12;
// $var -= 14;
// $var *= 5;
// $var /= 7;
// $var += 1;
// $var += 1;
// $var++;
// $var--;
// $var -= 1;
// echo $var;

// Задачи для решения 
// Создайте переменные $a=10 и $b=2. Выведите на экран их сумму, разность, произведение и частное (результат деления). 
$a = 10;
$b = 2;
// $c = $a + $b;
// echo($c);
$c = abs($a - $b);
// echo($c);
// $c = $a * $b;
echo($c);
// $c = $a / $b;
// echo($c);



?>
